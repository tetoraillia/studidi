<% lesson ||= local_assigns[:lesson] || local_assigns.dig(:locals, :lesson) %>

<div class="test-lesson">
  <div class="container py-4">
    <div class="card shadow-sm">
      <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h2 class="h5 mb-0"><%= lesson&.title || 'Test' %></h2>
        <% if current_user.present? %>
          <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addQuestionModal">
            <i class="bi bi-plus-lg"></i> Add Question
          </button>
        <% end %>
      </div>
      
      <div class="card-body p-4">
        <% if lesson&.questions&.any? %>
          <%= form_with model: lesson, url: submit_test_lesson_path(lesson), method: :post, local: true, class: 'test-form' do |f| %>
            <%= f.fields_for :questions do |question_fields| %>
              <div class="question mb-4 pb-3 border-bottom position-relative">
                <% if current_user.present? %>
                  <div class="position-absolute top-0 end-0">
                    <%= link_to 'Edit', '#', class: 'btn btn-sm btn-outline-secondary edit-question', 
                                 data: { question_id: question_fields.object.id } %>
                    <%= link_to 'Delete', '#', class: 'btn btn-sm btn-outline-danger', 
                                 data: { confirm: 'Are you sure you want to delete this question?', 
                                        turbo_method: :delete, 
                                        controller: 'questions', 
                                        action: 'click->questions#delete',
                                        question_id: question_fields.object.id } %>
                  </div>
                <% end %>
                
                <h5 class="question-title pe-4">
                  <span class="badge bg-primary me-2"><%= question_fields.index + 1 %></span>
                  <%= question_fields.object.content %>
                </h5>
                
                <% if question_fields.object.multiple_choice? %>
                  <div class="ms-4 mt-3">
                    <% question_fields.object.options.each do |option| %>
                      <div class="form-check mb-2">
                        <%= radio_button_tag "answers[#{question_fields.object.id}]", option.id, false, 
                            class: 'form-check-input', id: "answer_#{question_fields.object.id}_#{option.id}" %>
                        <label class="form-check-label" for="answer_<%= question_fields.object.id %>_<%= option.id %>">
                          <%= option.content %>
                          <% if option.correct? %>
                            <span class="badge bg-success ms-2">Correct</span>
                          <% end %>
                        </label>
                      </div>
                    <% end %>
                    
                    <% if can?(:manage, lesson) && question_fields.object.multiple_choice? %>
                      <button type="button" class="btn btn-sm btn-outline-secondary mt-2 add-option" 
                              data-question-id="<%= question_fields.object.id %>">
                        <i class="bi bi-plus"></i> Add Option
                      </button>
                    <% end %>
                  </div>
                <% else %>
                  <div class="ms-4 mt-3">
                    <%= text_area_tag "answers[#{question_fields.object.id}]", nil, 
                        class: 'form-control', 
                        rows: 3, 
                        placeholder: 'Type your answer here...',
                        disabled: can?(:manage, lesson) %>
                  </div>
                <% end %>
              </div>
            <% end %>
            
            <% unless can? :manage, lesson %>
              <div class="text-end mt-4">
                <%= f.submit 'Submit Test', class: 'btn btn-primary px-4' %>
              </div>
            <% end %>
          <% end %>
        <% else %>
          <div class="text-center text-muted py-4">
            <p>No questions available for this test.</p>
            <% if current_user.present? %>
              <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addQuestionModal">
                <i class="bi bi-plus-lg"></i> Add Your First Question
              </button>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<% if can? :manage, lesson %>
  <!-- Add Question Modal -->
  <div class="modal fade" id="addQuestionModal" tabindex="-1" aria-labelledby="addQuestionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addQuestionModalLabel">Add New Question</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <%= form_with model: [lesson, lesson.questions.build], url: lesson_questions_path(lesson), local: true do |f| %>
          <div class="modal-body">
            <div class="mb-3">
              <%= f.label :content, 'Question', class: 'form-label' %>
              <%= f.text_area :content, class: 'form-control', rows: 2, required: true %>
            </div>
            
            <div class="mb-3">
              <%= f.label :question_type, 'Question Type', class: 'form-label' %>
              <%= f.select :question_type, 
                          options_for_select([['Multiple Choice', 'multiple_choice'], ['Text Answer', 'text']]), 
                          { include_blank: 'Select question type' }, 
                          { class: 'form-select', id: 'question-type-selector', required: true } %>
            </div>
            
            <div id="options-container" class="mb-3" style="display: none;">
              <label class="form-label">Options</label>
              <div id="options-list">
                <!-- Options will be added here by JavaScript -->
              </div>
              <button type="button" class="btn btn-sm btn-outline-secondary mt-2" id="add-option">
                <i class="bi bi-plus"></i> Add Option
              </button>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <%= f.submit 'Save Question', class: 'btn btn-primary' %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
  
  <!-- Add Option Template (hidden) -->
  <template id="option-template">
    <div class="input-group mb-2 option-row">
      <div class="input-group-text">
        <input class="form-check-input mt-0" type="radio" name="correct_option" value="__index__" required>
      </div>
      <input type="text" name="question[options_attributes][__index__][content]" class="form-control" placeholder="Option text" required>
      <input type="hidden" name="question[options_attributes][__index__][correct]" value="false" class="correct-option">
      <button type="button" class="btn btn-outline-danger delete-option">
        <i class="bi bi-trash"></i>
      </button>
    </div>
  </template>
  
  <%= javascript_tag nonce: true do %>
    document.addEventListener('DOMContentLoaded', function() {
      const questionTypeSelector = document.getElementById('question-type-selector');
      const optionsContainer = document.getElementById('options-container');
      const optionsList = document.getElementById('options-list');
      const addOptionBtn = document.getElementById('add-option');
      const optionTemplate = document.getElementById('option-template');
      let optionCounter = 0;
      
      // Toggle options container based on question type
      if (questionTypeSelector) {
        questionTypeSelector.addEventListener('change', function() {
          optionsContainer.style.display = this.value === 'multiple_choice' ? 'block' : 'none';
          if (this.value === 'multiple_choice' && optionsList.children.length === 0) {
            addOption();
          }
        });
      }
      
      // Add new option
      function addOption() {
        const newOption = optionTemplate.content.cloneNode(true);
        const newOptionHTML = newOption.querySelector('.option-row').outerHTML
          .replace(/__index__/g, optionCounter);
        
        optionsList.insertAdjacentHTML('beforeend', newOptionHTML);
        optionCounter++;
        
        // Add event listener to the new radio button
        const newRadio = optionsList.lastElementChild.querySelector('input[type="radio"]');
        newRadio.addEventListener('change', updateCorrectOption);
        
        // Add event listener to delete button
        const deleteBtn = optionsList.lastElementChild.querySelector('.delete-option');
        deleteBtn.addEventListener('click', function() {
          if (optionsList.children.length > 1) {
            this.closest('.option-row').remove();
          }
        });
      }
      
      // Update hidden correct option field when radio is selected
      function updateCorrectOption(e) {
        document.querySelectorAll('.correct-option').forEach(input => {
          input.value = 'false';
        });
        e.target.closest('.option-row').querySelector('.correct-option').value = 'true';
      }
      
      // Add first option when page loads if it's a multiple choice question
      if (questionTypeSelector && questionTypeSelector.value === 'multiple_choice') {
        addOption();
      }
      
      // Add option button click handler
      if (addOptionBtn) {
        addOptionBtn.addEventListener('click', addOption);
      }
      
      // Edit question button
      document.querySelectorAll('.edit-question').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.preventDefault();
          const questionId = this.dataset.questionId;
          // Implement edit functionality here
          console.log('Edit question', questionId);
        });
      });
      
      // Add option to existing question
      document.querySelectorAll('.add-option').forEach(btn => {
        btn.addEventListener('click', function() {
          const questionId = this.dataset.questionId;
          // Implement add option functionality here
          console.log('Add option to question', questionId);
        });
      });
    });
  <% end %>
<% end %>

<style>
  .question {
    position: relative;
    padding-right: 1rem;
  }
  
  .question-actions {
    position: absolute;
    top: 0;
    right: 0;
  }
  
  .option-row {
    transition: all 0.2s;
  }
  
  .option-row:hover {
    background-color: #f8f9fa;
  }
  
  .delete-option {
    opacity: 0.7;
  }
  
  .delete-option:hover {
    opacity: 1;
  }
</style>

<style>
.test-lesson .question-title {
  font-weight: 500;
  margin-bottom: 1rem;
}

.test-lesson .form-check {
  padding-left: 1.5em;
}

.test-lesson .form-check-input {
  margin-left: -1.5em;
}

.test-lesson .form-check-label {
  cursor: pointer;
  padding-left: 0.5em;
}
</style>